generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String           @id @default(cuid())
    name           String?
    email          String?          @unique
    emailVerified  DateTime?
    image          String?
    createdAt      DateTime         @default(now())
    roles          Roles[]
    year           Year?
    accounts       Account[]
    sessions       Session[]
    projects       Project[]
    media          Media[]
    collaborations Project[]        @relation("ProjectCollaborators")
    ContactRequest ContactRequest[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Project {
    id          Int      @id @default(autoincrement())
    name        String
    description String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    collaborators  User[]           @relation(name: "ProjectCollaborators")
    rolesNeeded    Roles[]
    type           ProjectType[]
    ContactRequest ContactRequest[]

    @@index([name])
}

model Media {
    id        String    @id @default(cuid())
    url       String
    createdAt DateTime  @default(now())
    type      MediaType

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BlogPost {
    id        Int      @id @default(autoincrement())
    title     String
    content   String   @db.Text
    slug      String   @unique
    published Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ContactRequest {
    id             Int             @id @default(autoincrement())
    notes          String?
    purpose        ContactPurpose?
    cvUrl          String?
    roles          Roles[]
    addedToProject Boolean         @default(false)
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt

    project   Project @relation(fields: [projectId], references: [id])
    projectId Int
    user      User    @relation(fields: [userId], references: [id])
    userId    String
}

enum Roles {
    CMO
    CTO
    COFOUNDER
    CEO
    CPO
    CFO
    COO
    DESIGNER
    PROJECTMANAGER
    DATAANALYST
    SUSTAINABILITYSPECIALIST
    MARKETINGSTRATEGIST
    FINANCIALANALYST
    SOFTWAREDEVELOPER
    PRODUCTMANAGER
    PUBLICRELATIONSSPECIALIST
    PSYCHOLOGISTHRSPECIALIST
    LEGALCOMPLIANCEOFFICER
    ACCOUNTMANAGER
}

enum Year {
    FIRSTYEAR
    SECONDYEAR
    THIRDYEAR
    FOURTHYEAR
}

enum MediaType {
    IMAGE
    VIDEO
    AUDIO
}

enum ProjectType {
    NONPROFIT
    FORPROFIT
    IMPACT
    UPRISE
}

enum ContactPurpose {
    MOREDETAILS
    COLLAB
    MEETFORCOFFEE
}
