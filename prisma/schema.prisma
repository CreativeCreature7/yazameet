generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Project {
    id          Int      @id @default(autoincrement())
    name        String
    description String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    collaborators String[]
    rolesNeeded   Roles[]

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    roles         Roles[]
    year          Year?
    accounts      Account[]
    sessions      Session[]
    posts         Project[]
    Media         Media[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Media {
    id        String    @id @default(cuid())
    url       String
    createdAt DateTime  @default(now())
    type      MediaType

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Roles {
    DESIGNER
    PROJECTMANAGER
    DATAANALYST
    SUSTAINABILITYSPECIALIST
    MARKETINGSTRATEGIST
    FINANCIALANALYST
    SOFTWAREDEVELOPER
    PRODUCTMANAGER
    PUBLICRELATIONSSPECIALIST
    PSYCHOLOGISTHRSPECIALIST
    LEGALCOMPLIANCEOFFICER
}

enum Year {
    FIRST
    SECOND
    THIRD
}

enum MediaType {
    IMAGE
    VIDEO
    AUDIO
}
